name: Publish to GitHub Packages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

env:
  DOTNET_VERSION: "9.0.x"
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output

jobs:
  build-and-test:
    name: "Build and Test"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Restore dependencies"
        run: dotnet restore

      - name: "Build"
        run: dotnet build --configuration Release --no-restore

      - name: "Test"
        run: dotnet test --configuration Release --no-build --verbosity normal

  pack-and-publish:
    name: "Pack and Publish"
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Restore dependencies"
        run: dotnet restore

      - name: "Build"
        run: dotnet build --configuration Release --no-restore

      - name: "Create output directory"
        run: mkdir -p ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

      - name: "Pack"
        run: dotnet pack --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} --verbosity normal

      - name: "Push to GitHub Packages"
        run: |
          dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg \
            --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate

      - name: "Upload Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
          retention-days: 7

      - name: "Create Release Notes"
        id: release-notes
        run: |
          VERSION=$(grep -o '<PackageVersion>[^<]*' simpledispatch-servicebase.csproj | sed 's/<PackageVersion>//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version $VERSION published to GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ **Published Package**: SimpleDispatch.ServiceBase v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— **Package URL**: https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/packages" >> $GITHUB_STEP_SUMMARY

  create-release:
    name: "Create GitHub Release"
    runs-on: ubuntu-latest
    needs: pack-and-publish
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Get package version"
        id: version
        run: |
          VERSION=$(grep -o '<PackageVersion>[^<]*' simpledispatch-servicebase.csproj | sed 's/<PackageVersion>//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: "Check if tag exists"
        id: check-tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: "Create Release"
        if: steps.check-tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## SimpleDispatch.ServiceBase v${{ steps.version.outputs.version }}

            ðŸ“¦ **Package Published**: Available on GitHub Packages

            ### Installation
            ```bash
            dotnet add package SimpleDispatch.ServiceBase --version ${{ steps.version.outputs.version }}
            ```

            ### Changes
            See [CHANGELOG.md](./CHANGELOG.md) for detailed changes in this release.

            ### Package Information
            - **Package ID**: SimpleDispatch.ServiceBase
            - **Version**: ${{ steps.version.outputs.version }}
            - **Target Framework**: .NET 9.0

            ### Links
            - ðŸ“¦ [Package on GitHub Packages](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/packages)
            - ðŸ“– [Documentation](./README.md)
            - ðŸ”„ [Changelog](./CHANGELOG.md)
          draft: false
          prerelease: false
